---
title: "Theresa Wohlever | Assignment 02: Data Exploration"
format: pdf
editor: visual
---

## Load packages

```{r}
#| label: LoadPackages
#| echo: true
#| message: true

library(ggplot2)
library(dplyr)
library(stringr)
library(tidyr)
```

# Drug AMP Reporting - Quarterly

> Drugs that have been reported under the Medicaid Drug Rebate Program along with an indication of whether or not the required Average Manufacturer Price (AMP) was reported for each drug. All drugs are identified in the file by the 11-digit National Drug Code, product name, labeler name, and reported (R) or not reported (NR).

### Path Preparation

```{r}
#| label: SetWd
#| echo: true
#| message: true

setwd("/Users/theresawohlever/git_repos/BQOM-2578_DataMining/BQOM-2578_DataMining_twohlever/assignments/02-DataExploration")
getwd() 
```

### Environment clean up

```{r}
#| label: Cleanup
#| echo: true
#| message: true

rm(list = ls())
```

### Load data 

Raw data from Medicaid Drug AMP Reporting: <https://data.medicaid.gov/dataset/80956a7d-e343-54f3-94a7-45d41b34fc0b#data-table>

```{r}
#| label: Import
#| echo: true
#| message: true

base_FILENAME <- "DrugAMPReportingQuarterly022025" ## tiny" ## DrugAMPReportingQuarterly022025

#  read the csv into a dataframe, which we can manipulate in R. 

csv_FILE <- paste(base_FILENAME, ".csv", sep = "") 
raw_amp_df <- read.csv(csv_FILE, stringsAsFactors = FALSE) 

csv_OUT_FILE <- paste(base_FILENAME, "_processed.csv", sep = "") 
```

# Data Discovery

```{r}
#| label: DiscoveryRaw
#| echo: true
#| message: true

# head displays the first rows 
head(raw_amp_df) 

# tail displays the last rows 
tail(raw_amp_df) 
```

```{r}
#| label: DiscoverySummary
#| echo: true
#| message: true

# dim tells you how many rows by how many columns you have
dim(raw_amp_df) 

# names returns the names of the columns that you have 
names(raw_amp_df) 

#summary will give you relevant summary statistics for each variable depending on its type  
summary(raw_amp_df)
```

# Data Structure

## Date Column Creation 

-   Combines Year and Quarter columns into a proper Date column for better temporal analysis

-   Converts quarters to actual dates (Q1 = January 1st, Q4 = October 1st)

```{r}
#| label: DateColumn
#| echo: true
#| message: true

df <- raw_amp_df

# Create a meaningful Date column by combining Year and Quarter
# Convert quarter to actual dates for better temporal analysis
df$Date <- as.Date(paste(df$Year, (df$Quarter - 1) * 3 + 1, "01", sep = "-"))

```

## Drug Category Classification

-   Creates meaningful drug categories by analyzing FDA Product Names

-   Categories include: Fluoride Supplements, Pain Management, Antibiotics, Topical Treatments, Respiratory, OTC Pain Relief, and Other

-   Cleans up labeler company names by removing excessive spacing

```{r}
#| label: DrugCategory
#| echo: true
#| message: true


# Create drug category classification from FDA Product Name
# Extract drug categories and clean up labeler names
df$Drug_Category <- case_when(
  str_detect(toupper(df$FDA.Product.Name), "SODIUM FLUORIDE|FLUORITAB") ~ "Fluoride Supplements",
  str_detect(toupper(df$FDA.Product.Name), "VICODIN|PAIN") ~ "Pain Management",
  str_detect(toupper(df$FDA.Product.Name), "ANTIBIOTIC|OXACILLIN|PENICILLIN") ~ "Antibiotics",
  str_detect(toupper(df$FDA.Product.Name), "CREAM|LOTION|OINTMENT") ~ "Topical Treatments",
  str_detect(toupper(df$FDA.Product.Name), "COUGH|EXPECTORANT") ~ "Respiratory",
  str_detect(toupper(df$FDA.Product.Name), "ASPIRIN|IBUPROFEN|ACETAMINOPHEN|NAPROXEN") ~ "OTC Pain Relief",
  TRUE ~ "Other"
)

# Clean up labeler names (remove excessive spacing and formatting)
df$Labeler_Clean <- str_trim(str_replace_all(df$Labeler.Name, "\\s+", " "))

```

## Grouping

```{r}
#| label: DrugCategorySummary
#| echo: true
#| message: true


CategoryAndStatus <- group_by(df, Status, Drug_Category) %>%
    summarise(count = n())


```

## C. Cleaning: Data Types and Missing Values

### **Handling Missing Values**

```{r}
# We'll drop all Markdown values with select( - ...) 
# and replace NA values with the mean of Unemployment and CPI.
# features2<-features%>%select(-c(MarkDown1:MarkDown5))%>% 
  # mutate(Unemployment = replace_na(Unemployment,mean(Unemployment, na.rm = TRUE)),
        #CPI = replace_na(CPI,mean(CPI, na.rm = TRUE)))

# summary(features2)
```

## F. Publishing

```{r}
summary(df)
df%>%write.csv(csv_OUT_FILE,row.names = FALSE)

```

## **E. Verifying / Exploring**

### Distribution of Registration Status

```{r}
#| label: StatusDistribution
#| echo: true
#| message: true

p1 <- ggplot(df, aes(x = Status, fill = Status)) +
  geom_bar(stat = "count", alpha = 0.8) +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of FDA Registration Status",
       subtitle = "Comparison of Registered (R) vs Non-Registered (NR) Products",
       x = "Registration Status",
       y = "Number of Products",
       caption = "Data Source: FDA Drug Registration Database") +
  scale_fill_manual(values = c("NR" = "#E74C3C", "R" = "#27AE60")) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        legend.position = "none")

print(p1)


```

```{r}
#| label: StatusCategoriesDistribution
#| echo: true
#| message: true
# Graph 2: Drug Categories by Registration Status
p2 <- ggplot(df, aes(x = reorder(Drug_Category, Drug_Category, function(x) length(x)), 
                     fill = Status)) +
  geom_bar(position = "dodge", alpha = 0.8) +
  coord_flip() +
  labs(title = "Drug Categories by Registration Status",
       subtitle = "Distribution of product categories and their registration status",
       x = "Drug Category",
       y = "Number of Products",
       fill = "Status",
       caption = "Categories derived from FDA Product Names") +
  scale_fill_manual(values = c("NR" = "#E74C3C", "R" = "#27AE60"),
                    labels = c("NR" = "Non-Registered", "R" = "Registered")) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        axis.text.y = element_text(size = 10))

print(p2)


```

```{r}
#| label: PharmaCompaniesDistribution
#| echo: true
#| message: true

# Graph 3: Top Pharmaceutical Companies (Top 8)
top_labelers <- names(head(sort(table(df$Labeler_Clean), decreasing = TRUE), 8))
df_top <- df[df$Labeler_Clean %in% top_labelers, ]

p3 <- ggplot(df_top, aes(x = reorder(Labeler_Clean, Labeler_Clean, function(x) length(x)),
                         fill = Status)) +
  geom_bar(stat = "count", alpha = 0.8) +
  coord_flip() +
  labs(title = "Product Count by Top Pharmaceutical Companies",
       subtitle = "Leading companies by number of products in the database",
       x = "Pharmaceutical Company",
       y = "Number of Products",
       fill = "Registration Status",
       caption = "Top 8 companies by product count") +
  scale_fill_manual(values = c("NR" = "#E74C3C", "R" = "#27AE60"),
                    labels = c("NR" = "Non-Registered", "R" = "Registered")) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        axis.text.y = element_text(size = 9))

print(p3)





```

```{r}
#| label: RegistrationTimelineDistribution
#| echo: true
#| message: true


# Graph 4: Quarterly Registration Timeline
quarterly_summary <- df %>%
  group_by(Date, Status) %>%
  summarise(count = n(), .groups = 'drop')

p4 <- ggplot(quarterly_summary, aes(x = Date, y = count, fill = Status)) +
  geom_col(position = "stack", alpha = 0.8, width = 50) +
  geom_text(aes(label = count), position = position_stack(vjust = 0.5), 
            color = "white", size = 4, fontface = "bold") +
  labs(title = "Pharmaceutical Product Registration Timeline",
       subtitle = "Quarterly distribution of registered vs non-registered products in 2013",
       x = "Quarter",
       y = "Number of Products",
       fill = "Registration Status",
       caption = "Data shows Q1 and Q4 of 2013") +
  scale_fill_manual(values = c("NR" = "#E74C3C", "R" = "#27AE60"),
                    labels = c("NR" = "Non-Registered", "R" = "Registered")) +
  scale_x_date(date_labels = "%Y Q%q", date_breaks = "3 months") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        plot.subtitle = element_text(hjust = 0.5, size = 12),
        axis.text.x = element_text(angle = 45, hjust = 1))

print(p4)



```
