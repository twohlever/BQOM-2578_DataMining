---
title: "Assignment 03 Regressions "
subtitle: "BQOM 2578 | Data Mining"
date: "September 28, 2025" 
author: "Theresa Wohlever"
editor: source
format:
  pdf:
    toc: true
    toc-depth: 2
    number-sections: false
    mainfont: "Georgia"
    sansfont: "Avenir"
    monofont: "Menlo"
    mathfont: "STIX Two Math"
    pdf-engine: xelatex
---

# Assignment Instructions

https://canvas.pitt.edu/courses/324587/assignments/1871892

Define and describe the purpose of your analysis in terms of the output and input variable(s) you are interested in understanding for your project and if each variable is categorical or continuous.

Prepare your dataset for running the adequate regression.

Run at least three regressions, at least one linear and one logistic.

Decide how to present your final results; one model, several models? Which format? What graphs / visualizations would you use?

In the last section, describe your final conclusions grounded on your regression analysis and visualizations.

# Executive Summary

For Each variable is it categorical or continuous? 3 regressions on data evaluate models

# Data Preparation

## Loading packages

```{r}
#| label: LoadPackages
#| echo: false
#| message: false
#| results: 'hide'

rm(list = ls())

library(caTools)
library(ROCR)
library(caret)
library(tidyverse)
library(corrplot)
library(tidyverse)
library("lm.beta")

working_directory <- "/Users/theresawohlever/git_repos/BQOM-2578_DataMining/BQOM-2578_DataMining_twohlever/assignments/03-Regressions"
setwd(working_directory)

CSV_base_filename <- "hospital extract 2023"
CSV_IN_FILE <- paste(working_directory, "/", "raw_data/", CSV_base_filename, ".csv", sep = "")
CSV_OUT_FILE <- paste(working_directory, "/", CSV_base_filename, "_processed.csv", sep = "")

CSV_S_base_filename <- "SuicideByCounty"
CSV_S_IN_FILE <- paste(working_directory, "/", "raw_data/", CSV_S_base_filename, ".csv", sep = "")
CSV_S_OUT_FILE <- paste(working_directory, "/", CSV_S_base_filename, "_processed.csv", sep = "")

```

## Importing data

```{r}
#| label: ImportData
#| echo: false
#| message: false
#| results: 'hide'

# read.csv will read the csv into a dataframe, which we can manipulate in R.
raw_df = read.csv(CSV_IN_FILE, stringsAsFactors = TRUE)
head(raw_df)
summary(raw_df)


raw_s_df = read.csv(CSV_S_IN_FILE, stringsAsFactors = TRUE)
head(raw_s_df)
summary(raw_s_df)


```

## Data Cleaning & Wrangling

```{r}
#| label: CreateTarget
#| echo: true
#| message: true

selected_cols <- c("facility_id", 
               "facility_county",
               "type_of_organization",
               "children_hospital",
               "hospital_ltc",
               "on_site_ltc",
               "privateroomexist",
               "semiprivateroomexist",
               "discharges017",
               "discharges1864",
               "discharges65over",
               "dischargestotal",
               "alcohol_drug_detox",
               "alcoholdetox_beds_lic",
               "alcoholdetox_beds_staf",
               "alcoholdetox_admissions",
               "alcoholdetox_patient_days",
               "alcoholdetox_bed_days_avail",
               "alcoholdetox_beds_lic_vs_staf",
               "alcoholdetox_adm_vs_pat_days",
               "alcohol_drug_treat",
               "alcoholtreat_closing_date",
               "alcoholtreat_beds_lic",
               "alcoholtreat_beds_staf",
               "alcoholtreat_admissions",
               "alcoholtreat_patient_days",
               "alcoholtreat_bed_days_avail",
               "alcoholtreat_beds_lic_vs_staf",
               "alcohol_drug_treat_adm_vs_pat_days",
               "comprehensive_rehab",
               "comprehensive_rehab_beds_lic",
               "Comprehensive_rehab_beds_staf",
               "Comprehensive_rehab_admissions",
               "Comprehensive_rehab_patient_days",
               "Comprehensive_rehab_bed_days_avail",
               "comprehensive_rehab_beds_lic_vs_staf",
               "comprehensive_rehab_adm_vs_pat_days",
               "psych_0to17",
               "psych_0to17_beds_lic",
               "psych_0to17_beds_staf",
               "psych_0to17_admissions",
               "psych_0to17_patient_days",
               "psych_0to17_bed_days_avail",
               "psych_0to17_beds_lic_vs_staf",
               "psych_over17",
               "psych_over17_closing_date",
               "psych_over17_beds_lic",
               "psych_over17_beds_staf",
               "psych_over17_admissions",
               "psych_over17_patient_days",
               "psych_over17_bed_days_avail",
               "psych_over17_bed_days_avail_check",
               "psych_over17_patient_days_check",
               "psych_over17_beds_lic_vs_staf",
               "detox",
               "clinpsyc",
               "clinic_psychiatric",
               "psychiatrists",
               "ft_staff"
               )
# Keep only columns related to model 
## Only select columns that actually exist in the raw data
selected_cols <- selected_cols[!selected_cols %in% setdiff(selected_cols, names(raw_df)) ]
df <- subset(raw_df, select = selected_cols )

#
## Combine with county level suicide data
#
df <- merge(df, raw_s_df, by.x = "facility_county", by.y = "CountyState")
df_merged <- df ## Save state


# Only Keep relevant columns for predicting county suicide rate 
## Only select columns that actually exist in the raw data
selected_cols <- selected_cols[!selected_cols %in% c("facility_county", "CountyState")]
selected_cols <- c(selected_cols,"Obs_Count") # , "Population" )
selected_cols <- selected_cols[!selected_cols %in% setdiff(selected_cols, names(df)) ]
df <- subset(df, select = selected_cols )

####
####
#
# Clean Up Values
#
df <- df %>% rename(target = Obs_Count)

Cols2Numeric <- c(
  "target" #,
#  "Population"
)
# Remove formatting from character strings like commas or currency symbols
df <- df %>%
  mutate(across(.cols = all_of(Cols2Numeric), 
    ~ as.numeric(gsub("[^0-9.]", "", as.character(.)))))
df <- df %>%
  mutate(across(.cols = all_of(Cols2Numeric),
    ~ as.numeric(.)
  ))


## Convert Columns with Yes/No values to 0/1 Values
YesNo2Numeric <- df_merged %>%
   select(where(~ any(str_detect(as.character(.), regex("yes", ignore_case = TRUE)), na.rm = TRUE))) %>%
   names()

df <- df %>%
  mutate(across(.cols = all_of(YesNo2Numeric),
    ~ as.numeric(factor(.,
      levels = c("No", "Yes"))) - 1
  ))

## Convert other columns with strings to numbers
Cols2Factors <- c(
  "type_of_organization",
  "clinic_psychiatric"
)
# Convert character strings to Factors to Ints
df$type_of_organization <- as.integer(factor(df_merged$type_of_organization))


# Unique number already the initial character for clinic_psychiatric col
df <- df %>%
  mutate(clinic_psychiatric = str_sub(clinic_psychiatric, 1, 1))
df$clinic_psychiatric <- as.integer(factor(df_merged$clinic_psychiatric))  

```

```{r}
#| label: ReviewData
#| echo: true
#| message: true
#| fig-width: 10
#| fig-height: 10

summary(df)

## Normalized Scatter
minMax <- function(x) {
  (x - min(x)) / (max(x) - min(x))
}
df_norm <- as.data.frame(lapply(df, minMax))

df_long <- pivot_longer(df_norm, cols = -target, names_to = "variable", values_to = "value")
ggplot(df_long, aes(x = target, y = value, color = variable)) +
  geom_point(size=2) +
  theme_minimal()


## PCA
df_numeric <- df[sapply(df, is.numeric)]
pca_res <- prcomp(df_numeric, center = TRUE, scale. = TRUE)
df_pca <- as.data.frame(pca_res$x)
ggplot(df_pca, aes(x = PC1, y = PC2)) +
  geom_point(size=2) +
  theme_minimal()

```

## Preliminary Analysis

Evaluate Correlation Matrix

```{r}
#| label: CorrelationMatrix
#| echo: true
#| message: true
#| fig-width: 8
#| fig-height: 10

## Prep for correlation
# df <-df %>% relocate(target)  # moves the target variable to the first column (left hand side)
df_cor <- df

cor_mat <- cor(df)
cor_threshold <- 0.2
cor_threshold_count <- 2

cols_above_threshold <- which( colSums(abs(cor_mat) > cor_threshold, na.rm = TRUE) >= cor_threshold_count)
df <- subset(df, select = colnames(cor_mat)[cols_above_threshold] )
cor_mat <- cor(df)

cor_mat_plot <- round(cor_mat, 2)
cor_mat_plot[is.na(cor_mat_plot)] <- 0 # Replace all NA values with zero
corrplot(cor_mat_plot, 
  method="square",
  type="upper",
  order="AOE", 
  tl.col="darkgrey",
  cl.align.text = "r",
  diag=FALSE, 
  number.cex=0.6)


```

# Regression

## Linear Regression

Bake off by R squared

```{r}
#| label: LinearRegressionSingePredictorBakeOff
#| echo: true
#| message: true


# Assuming df is your dataframe and 'y' is the response variable
response <- "target"
predictors <- setdiff(names(df), response)

best_r2 <- -Inf
best_model <- NULL
best_predictor <- NULL

for (predictor in predictors) {
  formula <- as.formula(paste(response, "~", predictor))
  model <- lm(formula, data = df)
  r2 <- summary(model)$r.squared
  # For RMSE alternative:
  # pred <- predict(model, df)
  # rmse <- sqrt(mean((df[[response]] - pred)^2))
  
  if (r2 > best_r2) {
    best_r2 <- r2
    best_model <- model
    best_predictor <- predictor
  }
}

cat("Best single-predictor model uses:", best_predictor, "with R^2 =", best_r2, "\n")
# To view details of best_model:
summary(best_model)



```

### Stepwise Linear Regression

```{r}
#| label: StepwiseRegression
#| echo: true
#| message: true

# For more info: https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/step 

model <- lm(target ~ ., data = df)
summary(model)

# Perform stepwise regression
step_model_back <- step(model, direction = "backward",trace=999)
summary(step_model_back)

step_model_forward <- step(model, direction = "forward",trace=999)
summary(step_model_forward)


```

## Logistic Regression Models

Formula is very simple: glm(y \~ X, family="binomial").

For variables that we want to treat as factors (categorical variables) we use as.factor. R will change it to a dummy, taking the lowest value as 0.

Specifically, after using as.factor(Gender), 1 will become 0 and 2 will become 1.

```{r}
#| label: LogisticRegression
#| echo: true
#| message: true

logreg_ch = glm(target ~ children_hospital, data=df, family="gaussian")
summary(logreg_ch)

logreg_chdisch = glm(target ~ children_hospital  + discharges1864 + psych_over17
             + psych_over17_beds_lic, data=df, family="gaussian")
summary(logreg_chdisch)


```

# References

Hospital Data: https://www.pa.gov/agencies/health/health-statistics/health-facilities/hospital-reports

Suicide by County Data: https://www.phaim.health.pa.gov/EDD/WebForms/DeathCntySt.aspx
